########################################################################################
# A program that parses reads file and calculates the following statistics from the
# reads: read length distribution, GC content, number and count of duplicate reads found
# in the dataset.
########################################################################################

#!/usr/bin/python

from Bio.Seq import Seq
from Bio.Alphabet import generic_dna
from Bio import SeqIO
from Bio.SeqUtils import GC

def reads_length_dist(handle, fastq):
	"""Computate the reads length distribution in a fastq file."""
	for seq_record in SeqIO.parse(handle, fastq):
		max_reads_len=0

		if len(seq_record) > max_reads_len:
			max_reads_len = len(seq_record)

	len_dist = [0] * max_reads_len
	for seq_record in SeqIO.parse(handle, fastq):
		i = 1
		length = len(seq_record)
		while i <= max_reads_len:
			if i == length:
				len_dist[length-1] = len_dist[length-1] + 1
			i = i + 1
	i = 0
	reads_length_dist = open('reads_length_dist.txt', 'w+')
	while i < max_reads_len:
		reads_length_dist.write("Reads with length %s has %s repeats.\n"\
								 %(i + 1,len_dist[i]))
		i = i + 1
	reads_length_dist.close()
	
	return

def reads_GC(handle, fastq):
	"""Computate the GC content of all the reads in a fastq file."""
	concatenated = Seq("", generic_dna)
	for seq_record in SeqIO.parse(handle, fastq):
		concatenated += seq_record.seq

	gc_content = open('gc_content.txt','w+')
	gc_content.write("The GC content of this fastq file is %s.\n"\
					  %(GC(concatenated)))
	gc_content.close()

	return

def find_reads_repeats(handle, fastq):
	""" Find the repeats number of every read sequence."""
	seq_list = [ ]
	for seq_record in SeqIO.parse(handle, fastq):
		seq_list.append(str(seq_record.seq))
	#delete repeat reads sequence and create a list for the unique reads
	reads_list = list(set(seq_list))

	id_list = []
	reads_repeats_result = open('reads_repeats_result.txt','w+')
	for reads in reads_list:
		i = 0
		id_list_sub = []
		for seq_record in SeqIO.parse(handle, fastq):
			if str(seq_record.seq) == reads:
				i = i+1
				id_list_sub.append(seq_record.id)
		id_list.append(id_list_sub)
		reads_repeats_result.write("%s Find %s repeats.\n"%(id_list_sub,i))
	reads_repeats_result.close()

	return

reads_length_dist("adrenal_1.fastq", "fastq")
reads_GC("adrenal_1.fastq", "fastq")
find_reads_repeats("adrenal_1.fastq", "fastq")
