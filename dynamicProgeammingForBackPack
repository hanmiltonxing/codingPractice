##################################################################
#
# Dynamic programming solution to 0-1 Knapsack problem
#
##################################################################
#include<cstdio>
#include<algorithm>

using namespace std;

#define MAXN 2000
#define MAXC 80000

int V[MAXN], W[MAXN];
int d[MAXN][MAXC];

int main(){
	freopen("data.in", "r", stdin);
	freopen("data.out", "w", stdout);
	int n, C;
	while(scanf("%d %d", &n, &C) != EOF){
		for(int i=0; i<n; ++i)	scanf("%d %d", &V[i], &W[i]);

		for(int i=0; i<=n; ++i){
			for(int j=0; j<=C; ++j){
				d[i][j] = (i==0 ? 0 : d[i-1][j]);
				if(i>0 && j>=V[i-1])
					d[i][j] = max(d[i-1][j-V[i-1]]+W[i-1], d[i][j]);
			}
		}
		printf("%d\n", d[n][C]);
	}
	fclose(stdin);
	fclose(stdout);
	return 0;
}
